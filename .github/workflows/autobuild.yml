#### Automatically build and upload releases to GitHub ####


# see analyse_git_reference.py for implementation of the logic:
#     for every push to a branch starting with "autobuild": (can be used during development for tighter supervision of builds)
#          - do CodeQl while building for every platform
#          - publish the created binaries/packs only as artifacts/appendix of the github-action-run (not as release), and only retain those files for limited period
#     for every pull-request to master:
#          - do CodeQl while building for every platform
#          - publish the created binaries/packs only as artifacts/appendix of the github-action-run (not as release), and only retain those files for limited period
#     for every tag that starts with 'r' and has an arbitrary suffix (e.g. beta1, rc1, etc.)
#          - do CodeQl while building for every platform
#          - publish the created binaries/packs only as artifacts/appendix as a prerelease
#     for every tag that starts with 'r' and does not have any suffix:
#          - do CodeQl while building for every platform
#          - publish the created binaries/packs only as artifacts/appendix as a release
#

on:
  workflow_dispatch:
  push:
    tags:
      - "r*"
    branches:
      - "autobuild*"  # for developers: branches starting with autobuild will be built and evaluated on each push
      - "master"

  pull_request: # The branches below must be a subset of the branches in "push"
    branches:
      - master

name:                               Auto-Build
jobs:
  create_release:
     name:                          Prepare Auto-Build/Release
     runs-on:                       ubuntu-20.04
     outputs:
      publish_to_release:           ${{ steps.get-build-vars.outputs.PUBLISH_TO_RELEASE }}
      version:                      ${{ steps.get-build-vars.outputs.KOORDASIO_VERSION }}
     steps:
         # Checkout code
         - name:                    Checkout code
           uses:                    actions/checkout@v2

         # Set variables
         # Determine release / pre-release
         - name:                    Get koordasio build info, determine actions & variables
           run:                     ./.github/autobuild/get_build_vars.py
           id:                      get-build-vars

  release_assets:
    name:                           Build assets for ${{ matrix.config.config_name }}
    needs:                          create_release
    strategy:
      fail-fast:                    false
      matrix: # Think of this like a foreach loop. Basically runs the steps with every combination of the contents of this. More info: https://docs.github.com/en/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
        config:
           - config_name:           Windows 10+ (exe, msix)
             target_os:             windows
             building_on_os:        windows-2022
             base_command:          powershell .\.github\autobuild\windows.ps1 -Stage
            #  uses_codeql:           true

    runs-on:                        windows-2022
    steps:
      # Checkout code
      - name:                       Checkout code
        uses:                       actions/checkout@v2
        with:
          submodules:               true

      # Prepare (install QT & dependencies)
      - name:                               "Prepare Build for ${{ matrix.config.config_name }}"
        id:                                 setup
        run:                                ${{ matrix.config.base_command }} setup
        env:
          koordasio_project_path:           ${{ github.workspace }}
          koordasio_buildversionstring:     ${{ needs.create_release.outputs.version }}

      # # from Koord build ....
      # - name:                       Pre-build KoordASIO on Windows - set up msvc dev cmd
      #   uses:                       ilammy/msvc-dev-cmd@v1
      #   with:
      #     arch:                     amd64
      # - name:                       Pre-build KoordASIO on Windows - cmake
      #   run:                        cmake -S KoordASIO/src -B KoordASIO/src/out/build/x64-Release -G Ninja -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_INSTALL_PREFIX:PATH=${{ github.workspace }}/KoordASIO/src/out/install/x64-Release
      # - name:                       Pre-build KoordASIO on Windows - cmake --build
      #   run:                        cmake --build KoordASIO/src/out/build/x64-Release
      # - name:                       Pre-build KoordASIO on Windows - cmake --install
      #   run:                        cmake --install KoordASIO/src/out/build/x64-Release

      # Build
      - name:                               "Build for ${{ matrix.config.config_name }}"
        id:                                 build
        run:                                ${{ matrix.config.base_command }} build
        env:
          koordasio_project_path:           ${{ github.workspace }}
          koordasio_buildversionstring:     ${{ needs.create_release.outputs.version }}
          WINDOWS_CODESIGN_CERT:            ${{ secrets.WINDOWS_CODESIGN_CERT }}
          WINDOWS_CODESIGN_PWD:             ${{ secrets.WINDOWS_CODESIGN_PWD }}

      # Get artifacts
      - name:                               "Post-Build for ${{ matrix.config.config_name }}"
        id:                                 get-artifacts
        run:                                ${{ matrix.config.base_command }} get-artifacts
        env:
          koordasio_project_path:           ${{ github.workspace }}
          koordasio_buildversionstring:     ${{ needs.create_release.outputs.version }}

      # Upload Artifact1 to Job
      - name:                               Upload Artifact 1 to Job
        if:                                 ${{ steps.get-artifacts.outputs.artifact_1 }}
        uses:                               actions/upload-artifact@v3
        with:
          name:                             ${{ steps.get-artifacts.outputs.artifact_1 }}
          path:                             deploy/${{ steps.get-artifacts.outputs.artifact_1 }}
          retention-days:                   31
          if-no-files-found:                error # 'warn' or 'ignore' are also available, defaults to `warn`

      # Upload Artifact2 to Job
      - name:                               Upload Artifact 2 to Job
        if:                                 ${{ steps.get-artifacts.outputs.artifact_2 }}
        uses:                               actions/upload-artifact@v3
        with:
          name:                             ${{ steps.get-artifacts.outputs.artifact_2 }}
          path:                             deploy/${{ steps.get-artifacts.outputs.artifact_2 }}
          retention-days:                   31
          if-no-files-found:                error # 'warn' or 'ignore' are also available, defaults to `warn`

      # Create Release and upload Artifact1
      - name:                       Create Release1 ${{needs.create_release.outputs.release_tag}}  ${{needs.create_release.outputs.release_title}}
        if:                         >-
                                    needs.create_release.outputs.publish_to_release == 'true'
        id:                         create-release-n-upload1
        uses:                       softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN:             ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name:                 ${{ steps.get-build-vars.outputs.RELEASE_TAG }}
          name:                     ${{ steps.get-build-vars.outputs.RELEASE_TITLE }}
          # body_path:                ${{ env.release_changelog_path }}
          prerelease:               ${{ steps.get-build-vars.outputs.IS_PRERELEASE }}
          draft:                    true
          files:                    deploy/${{ steps.get-artifacts.outputs.artifact_1 }}

      # Upload Artifact2 to release
      - name:                       Create Release2 ${{needs.create_release.outputs.release_tag}}  ${{needs.create_release.outputs.release_title}}
        if:                         >-
                                    steps.get-artifacts.outputs.artifact_2 != '' &&
                                    needs.create_release.outputs.publish_to_release == 'true'
        id:                         create-release-n-upload2
        uses:                       softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN:             ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name:                 ${{ steps.get-build-vars.outputs.RELEASE_TAG }}
          name:                     ${{ steps.get-build-vars.outputs.RELEASE_TITLE }}
          # body_path:                ${{ env.release_changelog_path }}
          prerelease:               ${{ steps.get-build-vars.outputs.IS_PRERELEASE }}
          draft:                    true
          files:                    deploy/${{ steps.get-artifacts.outputs.artifact_2 }}

      # # Upload Artifact1 to Release
      # - name:                       Upload Artifact 1 to Release
      #   if:                         ${{ (steps.step_cmd3_postbuild.outputs.artifact_1 != '') &&  contains(needs.create_release.outputs.publish_to_release, 'true') }}
      #   id:                         upload-release-asset1
      #   uses:                       actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN:             ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url:               ${{ needs.create_release.outputs.upload_url }} # See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
      #     asset_path:               deploy/${{ steps.step_cmd3_postbuild.outputs.artifact_1 }}
      #     asset_name:               ${{ steps.step_cmd3_postbuild.outputs.artifact_1 }}
      #     asset_content_type:       application/octet-stream
      # # Upload Artifact2 to Release
      # - name:                       Upload Artifact 2 to Release
      #   if:                         ${{ (steps.step_cmd3_postbuild.outputs.artifact_2 != '') &&  contains(needs.create_release.outputs.publish_to_release, 'true') }}
      #   id:                         upload-release-asset2
      #   uses:                       actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN:             ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url:               ${{ needs.create_release.outputs.upload_url }} # See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
      #     asset_path:               deploy/${{ steps.step_cmd3_postbuild.outputs.artifact_2 }}
      #     asset_name:               ${{ steps.step_cmd3_postbuild.outputs.artifact_2 }}
      #     asset_content_type:       application/octet-stream


      #FIXME - leave out for now
      # # Run CodeQL tools for code-scanning for security
      # - name:                       Perform CodeQL Analysis
      #   if:                         matrix.config.uses_codeql
      #   uses:                       github/codeql-action/analyze@v1

on: [push, pull_request]
jobs:
  build:
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - msvc_config: x64-Release
            msvc_arch: amd64
            build_type: RelWithDebInfo
          # - msvc_config: x86-Release
          #   msvc_arch: amd64_x86
          #   build_type: RelWithDebInfo
          # - msvc_config: x64-Debug
          #   msvc_arch: amd64
          #   build_type: Debug
          # - msvc_config: x86-Debug
          #   msvc_arch: amd64_x86
          #   build_type: Debug
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
          # Required for version stamping (`git describe`) to work.
          fetch-depth: 0
      - uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.msvc_arch }}
      - name: install Qt
        run: |
          pip install aqtinstall==3.0.1
          aqt install-qt --outputdir C:\Qt windows desktop 6.4.1 win64_msvc2019_64 --modules qtmultimedia --archives qtbase qttools
          aqt install-tool windows desktop --outputdir C:\Qt tools_vcredist qt.tools.vcredist_msvc2019_x64
          aqt install-tool windows desktop --outputdir C:\Qt tools_cmake qt.tools.cmake
      - name: Set up codesign cert and passwd
        shell: powershell
        run: |
          $B64Cert = $Env:WINDOWS_CODESIGN_CERT
          $WindowsOVCert = [Convert]::FromBase64String($B64Cert)
          [IO.File]::WriteAllBytes('C:\KoordOVCert.pfx', $WindowsOVCert)
          $Env:WINDOWS_CODESIGN_PWD | Out-File 'C:\KoordOVCertPwd'
      ## Start actual build
      - run: cmake -S src -B src/out/build/${{ matrix.msvc_config }} -G Ninja -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DCMAKE_INSTALL_PREFIX:PATH=${{ github.workspace }}/src/out/install/${{ matrix.msvc_config }}
      - run: cmake --build src/out/build/${{ matrix.msvc_config }}
      - run: cmake --install src/out/build/${{ matrix.msvc_config }}

      # Run windeployqt
      - name: windeployqt
        run: windeployqt --release --no-compiler-runtime --dir=$DeployPath\$BuildArch --no-system-d3d-compiler --no-opengl-sw $BuildPath\release\kdasioconfig\KoordASIOControl.exe

      - name: Copy VSdist DLLs ???
        shell: powershell
        run: Copy-Item -Path "$VsDistFile64Path\*" -Destination "$DeployPath\$BuildArch"

      - name: Copy Binaries - necessary ??
        shell: powershell
        run: | 
          Move-Item -Path "$BuildPath\$BuildConfig\kdasioconfig\KoordASIOControl.exe" -Destination "$DeployPath\$BuildArch" -Force
          Move-Item -Path "$BuildPath\$BuildConfig\flexasio\install\bin\KoordASIO.dll" -Destination "$DeployPath\$BuildArch" -Force
          Move-Item -Path "$BuildPath\$BuildConfig\flexasio\install\bin\portaudio.dll" -Destination "$DeployPath\$BuildArch" -Force
          Move-Item -Path "$BuildPath\$BuildConfig\flexasio\install\bin\ASIOTest.dll" -Destination "$DeployPath\$BuildArch" -Force
          Move-Item -Path "$BuildPath\$BuildConfig\flexasio\install\bin\sndfile.dll" -Destination "$DeployPath\$BuildArch" -Force
          Move-Item -Path "$BuildPath\$BuildConfig\flexasio\install\bin\FlexASIOTest.exe" -Destination "$DeployPath\$BuildArch" -Force
          Move-Item -Path "$BuildPath\$BuildConfig\flexasio\install\bin\PortAudioDevices.exe" -Destination "$DeployPath\$BuildArch" -Force
          Move-Item -Path "$WindowsPath\kdinstaller.iss" -Destination "$RootPath" -Force

      - uses: actions/upload-artifact@v3
        with:
          name: FlexASIO-${{ matrix.msvc_config }}
          path: src/out/install/${{ matrix.msvc_config }}/

      # https://github.com/actions/virtual-environments/issues/2528
      # TODO: Scream only provides an output device. See if we can use a
      # different virtual audio driver that provides a virtual input device as
      # well.
      - name: Install Scream
        shell: powershell
        run: |
          Invoke-WebRequest https://github.com/duncanthrax/scream/releases/download/3.8/Scream3.8.zip -OutFile Scream3.8.zip
          Expand-Archive -Path Scream3.8.zip -DestinationPath Scream
          Import-Certificate -FilePath Scream\Install\driver\x64\Scream.cat -CertStoreLocation Cert:\LocalMachine\TrustedPublisher 
          Scream\Install\helpers\devcon-x64.exe install Scream\Install\driver\x64\Scream.inf *Scream
      # Starting from windows-2022, the Windows Audio engine doesn't seem to
      # be started by default anymore.
      - run: net start audiosrv
      # Obviously this doesn't do any kind of thorough testing. We just want to
      # make sure that the executables are not obviously broken.
      - run: src/out/install/${{ matrix.msvc_config }}/bin/PortAudioDevices.exe
      - run: src/out/install/${{ matrix.msvc_config }}/bin/FlexASIOTest.exe --verbose

  installer:
    runs-on: windows-latest
    needs: build
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
          # Required for version stamping (`git describe`) to work.
          fetch-depth: 0
      - uses: actions/download-artifact@v2
        with:
          name: FlexASIO-x64-Release
          path: src/out/install/x64-Release
      # - uses: actions/download-artifact@v2
      #   with:
      #     name: FlexASIO-x86-Release
      #     path: src/out/install/x86-Release
      - run: cmake -P installer.cmake
        working-directory: src
      - uses: actions/upload-artifact@v3
        with:
          name: FlexASIO-installer
          path: src/out/installer/*
